import type { Todo } from "@prisma/client";
import { dehydrate, QueryClient, useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { type NextPage } from "next";
import Head from "next/head";

import { TodoList } from "../components/TodoList";

type PostTodo = Pick<Todo, 'title' | 'description'>

const fetchTodos = async () => {
  const results = await fetch('http://localhost:3000/api/todos', {
    method: "GET"
  })

  const data = await results.json()
  return data
}

const postTodo = async (newTodo:PostTodo) => {
  const results = await fetch('http://localhost:3000/api/todos/create', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      todo: newTodo
    }),
  })
  const data = await results.json()
  return data;
}

const Home: NextPage = () => {
  const { data, ...queryOptions } = useQuery<Todo[]>({ queryKey: ['todos'], queryFn:fetchTodos })
  const queryClient = useQueryClient()
  const addTodoMutation = useMutation(
    (newTodo) => postTodo(newTodo),
    {
      onMutate: async (newTodo: PostTodo) => {
        await queryClient.cancelQueries(['todos'])

        const previousTodos = queryClient.getQueryData<Todo[]>(['todos'])
        if (previousTodos) {
          queryClient.setQueryData(['todos'], [...previousTodos, {id: Math.random().toString(), title: newTodo.title, description: newTodo.description, createdAt: new Date(), updatedAt: new Date(), isComplete: false, }])
        }
        return { previousTodos }
      },
      onError: (err, variables, context) => {
        if (context?.previousTodos) {
          queryClient.setQueryData<Todos>(['todos'], context.previousTodos)
        }
      },
      onSettled: () => {
        queryClient.invalidateQueries(['todos'])
      }
    }
  )

  return (
    <>
      <Head>
        <title>Tanstack Query Example</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Tanstack Query Example
          </h1>
        </div>
        {queryOptions.isFetched && (
          <div className="text-white">
          <div>Todos: {data?.length}</div>
          <div className="py-4">
            <button className="p-4 border border-white rounded-full hover:bg-white hover:text-[#2e026d]" type="button" onClick={() => addTodoMutation.mutate({
              title: `Newly Added Todo  ${Math.round(Math.random() * 1000)}`,
              description: 'This Todo has been added programmatically'
            })} >Add Todo</button>
          </div>
          <TodoList todos={data} />
        </div>
        )}
        
      </main>
    </>
  );
};

export async function getStaticProps() {
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(['todos'],() => fetchTodos())

  return {
    props: {
      page: {
      dehydratedState: dehydrate(queryClient)
      }
    }
  }
}

export default Home;
